{"entries":[{"timestamp":1729474733228,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n * Keyestudio Mecanum Micro:bit V2\n * Re-written by Ryan Schultz\n */\nenum MotorLoc {\n    Front_left = 0,\n    Back_left = 1,\n    Front_right = 2,\n    Back_right = 3,\n}\nenum MotorDir {\n    Forward = 0,\n    Reverse = 1\n};\nenum MotorState {\n    stop = 0,\n    brake = 1\n}\nenum LEDLoc {\n    Left = 0x09,\n    Right = 0x0a\n}\nenum LEDState {\n    ON = 4095,\n    OFF = 0\n}\n//% color=\"#AA278D\" weight=100\n//% groups=\"['Motor', 'LED', 'Servo', 'Sensors']\"\nnamespace mecanumRobotV2 {\n    export enum Servos {\n        D14 = 14,\n        D15 = 15\n    };\n    const STC15_ADDRESS = 0x30;   //device address\n\n    function i2cWrite(STC15_ADDRESS: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(STC15_ADDRESS, buf)\n\n    }\n\n    /****** MOTOR GROUP *******/\n\n    /**\n     * set speed of motor\n     */\n    //% block=\"Run $M motor $D at speed: $speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function ControlMotor(M: MotorLoc, D: MotorDir, speed: number) {\n        let speed_value = Math.map(speed, 0, 100, 0, 255);\n        if (M == 2 && D == 1) {\n            i2cWrite(0x30, 0x01, speed_value); //M1A\n            i2cWrite(0x30, 0x02, 0); //M1B\n        }\n        if (M == 2 && D == 0) {\n            i2cWrite(0x30, 0x01, 0); //M1A\n            i2cWrite(0x30, 0x02, speed_value); //M1B\n        }\n        if (M == 0 && D == 0) {\n            i2cWrite(0x30, 0x03, 0); //M2A\n            i2cWrite(0x30, 0x04, speed_value); //M2B\n        }\n        if (M == 0 && D == 1) {\n            i2cWrite(0x30, 0x03, speed_value); //M2A\n            i2cWrite(0x30, 0x04, 0); //M2B\n        }\n        if (M == 3 && D == 1) {\n            i2cWrite(0x30, 0x05, speed_value); //M3A\n            i2cWrite(0x30, 0x06, 0); //M3B\n        }\n        if (M == 3 && D == 0) {\n            i2cWrite(0x30, 0x05, 0); //M3A\n            i2cWrite(0x30, 0x06, speed_value); //M3B\n        }\n        if (M == 1 && D == 0) {\n            i2cWrite(0x30, 0x07, 0); //M4A\n            i2cWrite(0x30, 0x08, speed_value); //M4B\n        }\n        if (M == 1 && D == 1) {\n            i2cWrite(0x30, 0x07, speed_value); //M4A\n            i2cWrite(0x30, 0x08, 0); //M4B\n        }\n    }\n\n    //% block=\"Drive Forward at speed: $speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function DriveForward(speed: number) {\n        ControlMotor(0, 0, speed);\n        ControlMotor(1, 0, speed);\n        ControlMotor(2, 0, speed);\n        ControlMotor(3, 0, speed);\n    };\n\n    //% block=\"Drive Back at speed: $speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function DriveBack(speed: number) {\n        ControlMotor(0, 1, speed);\n        ControlMotor(1, 1, speed);\n        ControlMotor(2, 1, speed);\n        ControlMotor(3, 1, speed);\n    };\n\n    //% block=\"Strafe Left at speed: $speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function StrafeLeft(speed: number) {\n        ControlMotor(0, 1, speed);\n        ControlMotor(1, 0, speed);\n        ControlMotor(2, 0, speed);\n        ControlMotor(3, 1, speed);\n    };\n\n    //% block=\"Strafe Right at speed: $speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function StrafeRight(speed: number) {\n        ControlMotor(0, 0, speed);\n        ControlMotor(1, 1, speed);\n        ControlMotor(2, 1, speed);\n        ControlMotor(3, 0, speed);\n    };\n\n    //% block=\"Rotate Right at speed: $speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function RotateRight(speed: number) {\n        ControlMotor(0, 0, speed);\n        ControlMotor(1, 0, speed);\n        ControlMotor(2, 1, speed);\n        ControlMotor(3, 1, speed);\n    };\n\n    //% block=\"Rotate Left at speed: $speed\"\n    //% speed.min=0 speed.max=100\n    //% group=\"Motor\"\n    export function RotateLeft(speed: number) {\n        ControlMotor(0, 1, speed);\n        ControlMotor(1, 1, speed);\n        ControlMotor(2, 0, speed);\n        ControlMotor(3, 0, speed);\n    };\n\n    //% block=\"Stop Motors\"\n    //% group=\"Motor\"\n    export function StopMotor() {\n        //stop\n        i2cWrite(0x30, 0x01, 0); //M1A\n        i2cWrite(0x30, 0x02, 0); //M1B\n        i2cWrite(0x30, 0x03, 0); //M1A\n        i2cWrite(0x30, 0x04, 0); //M1B\n        i2cWrite(0x30, 0x05, 0); //M1A\n        i2cWrite(0x30, 0x06, 0); //M1B\n        i2cWrite(0x30, 0x07, 0); //M1A\n        i2cWrite(0x30, 0x08, 0); //M1B\n    }\n\n    /****** LED GROUP *******/\n\n    /**\n     * turn off all rgb-led\n     */\n    //% block=\"Turn $LedC LED $LedS\"\n    //% group=\"LED\" weight=76\n    export function setLed(LedC: LEDLoc, LedS: LEDState) {\n        i2cWrite(0x30, LedC, LedS);\n    }\n\n    /****** SERVO GROUP *******/\n\n    //% block=\"Set SERVO to angle %angle\"\n    //% group=\"Servo\" weight=70\n    //% angle.min=-90 angle.max.max=90\n    export function setServo(angle: number): void {\n        pins.servoWritePin(AnalogPin.P14, angle)\n    }\n\n    /****** SENSORS GROUP *******/\n\n    /**\n     * Ultrasonic sensor\n     */\n    let lastTime = 0;\n    //% block=\"Ultrasonic Value\"\n    //% group=\"Sensors\" weight=68\n    export function ultra(): number {\n        //send trig pulse\n        pins.setPull(DigitalPin.P15, PinPullMode.PullNone);\n        pins.digitalWritePin(DigitalPin.P15, 0)\n        control.waitMicros(2);\n        pins.digitalWritePin(DigitalPin.P15, 1)\n        control.waitMicros(10);\n        pins.digitalWritePin(DigitalPin.P15, 0)\n\n        // read echo pulse  max distance : 6m(35000us)  \n        let t = pins.pulseIn(DigitalPin.P16, PulseValue.High, 35000);\n        let ret = t;\n\n        //Eliminate the occasional bad data\n        if (ret == 0 && lastTime != 0) {\n            ret = lastTime;\n        }\n        lastTime = t;\n\n        return Math.round(ret / 58);\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":5777,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":238,"start2":238,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1729474733227,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"MecanumRobotV2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1729474801881}